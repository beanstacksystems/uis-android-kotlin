// Generated by view binder compiler. Do not edit!
package com.bss.uis.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bss.uis.R;
import com.bss.uis.StepViewRegistration;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddPatientBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton btnBackPersonalDetails;

  @NonNull
  public final AppCompatButton btnNextPersonalDetails;

  @NonNull
  public final StepViewRegistration customStepView;

  @NonNull
  public final LinearLayout footer;

  @NonNull
  public final FragmentContainerView fragmentContainerView;

  @NonNull
  public final MaterialToolbar topAppBar;

  private ActivityAddPatientBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton btnBackPersonalDetails,
      @NonNull AppCompatButton btnNextPersonalDetails, @NonNull StepViewRegistration customStepView,
      @NonNull LinearLayout footer, @NonNull FragmentContainerView fragmentContainerView,
      @NonNull MaterialToolbar topAppBar) {
    this.rootView = rootView;
    this.btnBackPersonalDetails = btnBackPersonalDetails;
    this.btnNextPersonalDetails = btnNextPersonalDetails;
    this.customStepView = customStepView;
    this.footer = footer;
    this.fragmentContainerView = fragmentContainerView;
    this.topAppBar = topAppBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddPatientBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddPatientBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_patient, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddPatientBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBackPersonalDetails;
      AppCompatButton btnBackPersonalDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnBackPersonalDetails == null) {
        break missingId;
      }

      id = R.id.btnNextPersonalDetails;
      AppCompatButton btnNextPersonalDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnNextPersonalDetails == null) {
        break missingId;
      }

      id = R.id.customStepView;
      StepViewRegistration customStepView = ViewBindings.findChildViewById(rootView, id);
      if (customStepView == null) {
        break missingId;
      }

      id = R.id.footer;
      LinearLayout footer = ViewBindings.findChildViewById(rootView, id);
      if (footer == null) {
        break missingId;
      }

      id = R.id.fragmentContainerView;
      FragmentContainerView fragmentContainerView = ViewBindings.findChildViewById(rootView, id);
      if (fragmentContainerView == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = ViewBindings.findChildViewById(rootView, id);
      if (topAppBar == null) {
        break missingId;
      }

      return new ActivityAddPatientBinding((ConstraintLayout) rootView, btnBackPersonalDetails,
          btnNextPersonalDetails, customStepView, footer, fragmentContainerView, topAppBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
