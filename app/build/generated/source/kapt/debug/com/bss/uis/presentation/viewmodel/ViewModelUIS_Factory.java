// Generated by Dagger (https://dagger.dev).
package com.bss.uis.presentation.viewmodel;

import com.bss.uis.domain.usecase.ApproveUserUseCase;
import com.bss.uis.domain.usecase.FetchPatientListUsecase;
import com.bss.uis.domain.usecase.FetchUserUseCase;
import com.bss.uis.domain.usecase.IsServerReachableUseCase;
import com.bss.uis.domain.usecase.LogOutUseCase;
import com.bss.uis.domain.usecase.LoginUserUseCase;
import com.bss.uis.domain.usecase.MasterDataUseCase;
import com.bss.uis.domain.usecase.PatientDetailUseCase;
import com.bss.uis.domain.usecase.PatientRegistrationUsecase;
import com.bss.uis.domain.usecase.PincodeUsecase;
import com.bss.uis.domain.usecase.RegisterUseCase;
import com.bss.uis.domain.usecase.RegisterWithGoogleUsecase;
import com.bss.uis.domain.usecase.TabDataUseCase;
import com.bss.uis.domain.usecase.UpdateUserProfileUseCase;
import com.bss.uis.domain.usecase.UserApiUseCase;
import com.bss.uis.domain.usecase.UserRightUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ViewModelUIS_Factory implements Factory<ViewModelUIS> {
  private final Provider<IsServerReachableUseCase> isServerReachableUseCaseProvider;

  private final Provider<RegisterUseCase> registerUserUsecaseProvider;

  private final Provider<MasterDataUseCase> masterDataUseCaseProvider;

  private final Provider<TabDataUseCase> tabDataUseCaseProvider;

  private final Provider<UserApiUseCase> userApiUseCaseProvider;

  private final Provider<UserRightUseCase> userRightUseCaseProvider;

  private final Provider<LoginUserUseCase> loginUserUseCaseProvider;

  private final Provider<LogOutUseCase> logOutUseCaseProvider;

  private final Provider<RegisterWithGoogleUsecase> registerWithGoogleUsecaseProvider;

  private final Provider<PincodeUsecase> pincodeUsecaseProvider;

  private final Provider<PatientRegistrationUsecase> patientRegistrationUsecaseProvider;

  private final Provider<FetchUserUseCase> fetchUserUseCaseProvider;

  private final Provider<ApproveUserUseCase> approveUserUseCaseProvider;

  private final Provider<FetchPatientListUsecase> fetchPatientListUsecaseProvider;

  private final Provider<UpdateUserProfileUseCase> updateUserProfileUseCaseProvider;

  private final Provider<PatientDetailUseCase> patientDetailUseCaseProvider;

  public ViewModelUIS_Factory(Provider<IsServerReachableUseCase> isServerReachableUseCaseProvider,
      Provider<RegisterUseCase> registerUserUsecaseProvider,
      Provider<MasterDataUseCase> masterDataUseCaseProvider,
      Provider<TabDataUseCase> tabDataUseCaseProvider,
      Provider<UserApiUseCase> userApiUseCaseProvider,
      Provider<UserRightUseCase> userRightUseCaseProvider,
      Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<LogOutUseCase> logOutUseCaseProvider,
      Provider<RegisterWithGoogleUsecase> registerWithGoogleUsecaseProvider,
      Provider<PincodeUsecase> pincodeUsecaseProvider,
      Provider<PatientRegistrationUsecase> patientRegistrationUsecaseProvider,
      Provider<FetchUserUseCase> fetchUserUseCaseProvider,
      Provider<ApproveUserUseCase> approveUserUseCaseProvider,
      Provider<FetchPatientListUsecase> fetchPatientListUsecaseProvider,
      Provider<UpdateUserProfileUseCase> updateUserProfileUseCaseProvider,
      Provider<PatientDetailUseCase> patientDetailUseCaseProvider) {
    this.isServerReachableUseCaseProvider = isServerReachableUseCaseProvider;
    this.registerUserUsecaseProvider = registerUserUsecaseProvider;
    this.masterDataUseCaseProvider = masterDataUseCaseProvider;
    this.tabDataUseCaseProvider = tabDataUseCaseProvider;
    this.userApiUseCaseProvider = userApiUseCaseProvider;
    this.userRightUseCaseProvider = userRightUseCaseProvider;
    this.loginUserUseCaseProvider = loginUserUseCaseProvider;
    this.logOutUseCaseProvider = logOutUseCaseProvider;
    this.registerWithGoogleUsecaseProvider = registerWithGoogleUsecaseProvider;
    this.pincodeUsecaseProvider = pincodeUsecaseProvider;
    this.patientRegistrationUsecaseProvider = patientRegistrationUsecaseProvider;
    this.fetchUserUseCaseProvider = fetchUserUseCaseProvider;
    this.approveUserUseCaseProvider = approveUserUseCaseProvider;
    this.fetchPatientListUsecaseProvider = fetchPatientListUsecaseProvider;
    this.updateUserProfileUseCaseProvider = updateUserProfileUseCaseProvider;
    this.patientDetailUseCaseProvider = patientDetailUseCaseProvider;
  }

  @Override
  public ViewModelUIS get() {
    return newInstance(isServerReachableUseCaseProvider.get(), registerUserUsecaseProvider.get(), masterDataUseCaseProvider.get(), tabDataUseCaseProvider.get(), userApiUseCaseProvider.get(), userRightUseCaseProvider.get(), loginUserUseCaseProvider.get(), logOutUseCaseProvider.get(), registerWithGoogleUsecaseProvider.get(), pincodeUsecaseProvider.get(), patientRegistrationUsecaseProvider.get(), fetchUserUseCaseProvider.get(), approveUserUseCaseProvider.get(), fetchPatientListUsecaseProvider.get(), updateUserProfileUseCaseProvider.get(), patientDetailUseCaseProvider.get());
  }

  public static ViewModelUIS_Factory create(
      Provider<IsServerReachableUseCase> isServerReachableUseCaseProvider,
      Provider<RegisterUseCase> registerUserUsecaseProvider,
      Provider<MasterDataUseCase> masterDataUseCaseProvider,
      Provider<TabDataUseCase> tabDataUseCaseProvider,
      Provider<UserApiUseCase> userApiUseCaseProvider,
      Provider<UserRightUseCase> userRightUseCaseProvider,
      Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<LogOutUseCase> logOutUseCaseProvider,
      Provider<RegisterWithGoogleUsecase> registerWithGoogleUsecaseProvider,
      Provider<PincodeUsecase> pincodeUsecaseProvider,
      Provider<PatientRegistrationUsecase> patientRegistrationUsecaseProvider,
      Provider<FetchUserUseCase> fetchUserUseCaseProvider,
      Provider<ApproveUserUseCase> approveUserUseCaseProvider,
      Provider<FetchPatientListUsecase> fetchPatientListUsecaseProvider,
      Provider<UpdateUserProfileUseCase> updateUserProfileUseCaseProvider,
      Provider<PatientDetailUseCase> patientDetailUseCaseProvider) {
    return new ViewModelUIS_Factory(isServerReachableUseCaseProvider, registerUserUsecaseProvider, masterDataUseCaseProvider, tabDataUseCaseProvider, userApiUseCaseProvider, userRightUseCaseProvider, loginUserUseCaseProvider, logOutUseCaseProvider, registerWithGoogleUsecaseProvider, pincodeUsecaseProvider, patientRegistrationUsecaseProvider, fetchUserUseCaseProvider, approveUserUseCaseProvider, fetchPatientListUsecaseProvider, updateUserProfileUseCaseProvider, patientDetailUseCaseProvider);
  }

  public static ViewModelUIS newInstance(IsServerReachableUseCase isServerReachableUseCase,
      RegisterUseCase registerUserUsecase, MasterDataUseCase masterDataUseCase,
      TabDataUseCase tabDataUseCase, UserApiUseCase userApiUseCase,
      UserRightUseCase userRightUseCase, LoginUserUseCase loginUserUseCase,
      LogOutUseCase logOutUseCase, RegisterWithGoogleUsecase registerWithGoogleUsecase,
      PincodeUsecase pincodeUsecase, PatientRegistrationUsecase patientRegistrationUsecase,
      FetchUserUseCase fetchUserUseCase, ApproveUserUseCase approveUserUseCase,
      FetchPatientListUsecase fetchPatientListUsecase,
      UpdateUserProfileUseCase updateUserProfileUseCase,
      PatientDetailUseCase patientDetailUseCase) {
    return new ViewModelUIS(isServerReachableUseCase, registerUserUsecase, masterDataUseCase, tabDataUseCase, userApiUseCase, userRightUseCase, loginUserUseCase, logOutUseCase, registerWithGoogleUsecase, pincodeUsecase, patientRegistrationUsecase, fetchUserUseCase, approveUserUseCase, fetchPatientListUsecase, updateUserProfileUseCase, patientDetailUseCase);
  }
}
