// Generated by Dagger (https://dagger.dev).
package com.bss.uis.di;

import com.bss.uis.data.remote.ApiInterFace;
import com.bss.uis.data.remote.PincodeInterface;
import com.bss.uis.domain.repository.Repository;
import com.bss.uis.mapper.AuthResponseDomainMapper;
import com.bss.uis.mapper.MasterDomainResponseMapper;
import com.bss.uis.mapper.TabResponseDomainMapper;
import com.bss.uis.mapper.UserApiResponseDomainMapper;
import com.bss.uis.mapper.UserRightsDomainMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final Provider<ApiInterFace> apiInterFaceProvider;

  private final Provider<PincodeInterface> pincodeInterfaceProvider;

  private final Provider<AuthResponseDomainMapper> authResponseDomainMapperProvider;

  private final Provider<MasterDomainResponseMapper> masterDomainResponseMapperProvider;

  private final Provider<TabResponseDomainMapper> tabResponseDomainMapperProvider;

  private final Provider<UserApiResponseDomainMapper> userApiResponseDomainMapperProvider;

  private final Provider<UserRightsDomainMapper> userRightsDomainMapperProvider;

  public RepositoryModule_ProvideRepositoryFactory(Provider<ApiInterFace> apiInterFaceProvider,
      Provider<PincodeInterface> pincodeInterfaceProvider,
      Provider<AuthResponseDomainMapper> authResponseDomainMapperProvider,
      Provider<MasterDomainResponseMapper> masterDomainResponseMapperProvider,
      Provider<TabResponseDomainMapper> tabResponseDomainMapperProvider,
      Provider<UserApiResponseDomainMapper> userApiResponseDomainMapperProvider,
      Provider<UserRightsDomainMapper> userRightsDomainMapperProvider) {
    this.apiInterFaceProvider = apiInterFaceProvider;
    this.pincodeInterfaceProvider = pincodeInterfaceProvider;
    this.authResponseDomainMapperProvider = authResponseDomainMapperProvider;
    this.masterDomainResponseMapperProvider = masterDomainResponseMapperProvider;
    this.tabResponseDomainMapperProvider = tabResponseDomainMapperProvider;
    this.userApiResponseDomainMapperProvider = userApiResponseDomainMapperProvider;
    this.userRightsDomainMapperProvider = userRightsDomainMapperProvider;
  }

  @Override
  public Repository get() {
    return provideRepository(apiInterFaceProvider.get(), pincodeInterfaceProvider.get(), authResponseDomainMapperProvider.get(), masterDomainResponseMapperProvider.get(), tabResponseDomainMapperProvider.get(), userApiResponseDomainMapperProvider.get(), userRightsDomainMapperProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryFactory create(
      Provider<ApiInterFace> apiInterFaceProvider,
      Provider<PincodeInterface> pincodeInterfaceProvider,
      Provider<AuthResponseDomainMapper> authResponseDomainMapperProvider,
      Provider<MasterDomainResponseMapper> masterDomainResponseMapperProvider,
      Provider<TabResponseDomainMapper> tabResponseDomainMapperProvider,
      Provider<UserApiResponseDomainMapper> userApiResponseDomainMapperProvider,
      Provider<UserRightsDomainMapper> userRightsDomainMapperProvider) {
    return new RepositoryModule_ProvideRepositoryFactory(apiInterFaceProvider, pincodeInterfaceProvider, authResponseDomainMapperProvider, masterDomainResponseMapperProvider, tabResponseDomainMapperProvider, userApiResponseDomainMapperProvider, userRightsDomainMapperProvider);
  }

  public static Repository provideRepository(ApiInterFace apiInterFace,
      PincodeInterface pincodeInterface, AuthResponseDomainMapper authResponseDomainMapper,
      MasterDomainResponseMapper masterDomainResponseMapper,
      TabResponseDomainMapper tabResponseDomainMapper,
      UserApiResponseDomainMapper userApiResponseDomainMapper,
      UserRightsDomainMapper userRightsDomainMapper) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideRepository(apiInterFace, pincodeInterface, authResponseDomainMapper, masterDomainResponseMapper, tabResponseDomainMapper, userApiResponseDomainMapper, userRightsDomainMapper));
  }
}
